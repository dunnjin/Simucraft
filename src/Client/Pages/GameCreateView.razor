@using BlazorInputFile;

@page "/gamecreateview" 

  <div class="ui container">
    <h2 class="ui header">
      <i class="map icon"></i>
      <div class="content">
        Create new Game
      </div>
    </h2>
    @if (!string.IsNullOrEmpty(_errorMessage))
    {
      <div class="ui negative message">
        <i class="close icon" @onclick="(() => _errorMessage = null)"></i>
        <div class="header">
          Error
        </div>
        <p>@_errorMessage</p>
      </div>
    }

    @if (!_rulesets.Any() && _isInitialized && string.IsNullOrEmpty(_errorMessage))
    {
      <p>A Ruleset is needed before you can create a Game, click <a href="/rulesetselectview">here</a> to create one.</p>
    }

    @if (!_isInitialized)
    {
      <form class="ui form">
        <div class="ui fluid placeholder">
          <div class="short line"></div>
          <div class="full line"></div>
        </div>
        <div class="ui fluid placeholder">
          <div class="short line"></div>
          <div class="full line"></div>
          <div class="full line"></div>
        </div>
        <div class="ui fluid placeholder">
          <div class="full line"></div>
          <div class="full line"></div>
        </div>
        <div class="ui fluid placeholder">
          <div class="full line"></div>
          <div class="full line"></div>
        </div>
      </form>
    }
    @if (_rulesets.Any() && _isInitialized)
    {
      <EditForm OnSubmit="@this.SubmitAsync" EditContext="@_editContextValidator.EditContext" class="ui form" style="@(!_isInitialized ? "display: none" : null)">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="field @(!_editContextValidator.IsFieldValidated(nameof(_game.Name)) ? "error" : null)">
          <label>Name</label>
          <InputText class="focus ui input" type="text" placeholder="Game Name" maxlength="50" @bind-Value="_game.Name" />
          <div class="ui pointing red basic label" style="@(!_editContextValidator.IsFieldValidated(nameof(_game.Name)) ? null : "display: none")">
            <ValidationMessage For="@(() => _game.Name)"></ValidationMessage>
          </div>
        </div>
        <div class="field @(!_editContextValidator.IsFieldValidated(nameof(_game.Description)) ? "error" : null)">
          <label>Description</label>
          <InputTextArea class="ui input" rows="2" maxlength="250" placeholder="Describe the Game" @bind-Value="_game.Description" style="resize: none;" />
          <div class="ui pointing red basic label" style="@(!_editContextValidator.IsFieldValidated(nameof(_game.Description)) ? null : "display: none")">
            <ValidationMessage For="@(() => _game.Description)"></ValidationMessage>
          </div>
        </div>
        <div class="two fields">
          <div class="field">
            <label>Ruleset</label>
            <select class="ui dropdown" @bind="@_game.RulesetId">
              @foreach (var ruleset in _rulesets)
              {
                var rulesetId = ruleset.Id;
                <option value="@rulesetId">@ruleset.Name</option>
              }
            </select>
          </div>
        </div>
        <div class="field">
          <button class="ui fluid large submit primary button @(_isSaving ? "loading disabled" : null)">Save</button>
        </div>
      </EditForm>
    }
  </div>