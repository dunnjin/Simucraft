@using Simucraft.Client.Common;
@using Simucraft.Client.Models;

@if (!string.IsNullOrEmpty(_errorMessage))
  {
    <div class="ui negative message">
      <i class="close icon" @onclick="(() => _errorMessage = null)"></i>
      <div class="header">
        Error
      </div>
      <p>@_errorMessage</p>
    </div>
  }
  <h2 class="ui header">
    @if (_isListView)
    {
      <a class="ui right floated positive basic button" @onclick="@(() => this.NavigateToCreate(null))">
        <i class="add icon"></i>
        Create
      </a>
    }
    <i class="cogs icon" />
    <div class="content">
      Skills
      <div class="sub header">Set different types of Rolls a Character could perform in a Game.</div>
    </div>
  </h2>

  @if (_isListView)
  {
    @foreach (var group in this.Ruleset.Skills.GroupBy(w => w.Category.ToUpper()).OrderBy(w => w.Key))
    {
      <h4 class="ui dividing header">
        @group.Key
      </h4>
      <div class="ui link four cards">
        @foreach (var entity in group.OrderBy(e => e.Name))
        {
          var id = entity.Id;
          <div class="brown card" @onclick="@(() => this.NavigateToCreate(id))">
            <div class="content">
              <div class="header">@entity.Name</div>
              <div class="description">
                <p>@entity.Description?.Truncate(300)</p>
              </div>
            </div>
            <div class="extra content">
              <a class="left floated like" @onclick="@(async () => await this.CopyAsync(id))" @onclick:stopPropagation>
                <i class="copy icon grey"></i>
                Copy
              </a>
              <a class="right floated delete" @onclick="@(async () => await this.PromptDeleteAsync(id))" @onclick:stopPropagation>
                <i class="delete icon red"></i>
                Delete
              </a>
            </div>
          </div>
        }
      </div>
    }
  }
  else
  {
<EditForm OnSubmit="@this.SubmitAsync" EditContext="@_editContextValidator.EditContext" class="ui form">
  <DataAnnotationsValidator></DataAnnotationsValidator>
  <div class="two fields">
    <div class="field @(!_editContextValidator.IsFieldValidated(nameof(_skill.Name)) ? "error" : null)">
      <label data-tooltip="The Name of the Skill" data-position="top left">
        Name
      </label>
      <InputText class="focus ui input" type="text" placeholder="Name" maxlength="50" @bind-Value="_skill.Name" />
      @if (!_editContextValidator.IsFieldValidated(nameof(_skill.Name)))
      {
        <div class="ui pointing red basic label">
          <ValidationMessage For="@(() => _skill.Name)"></ValidationMessage>
        </div>
      }
    </div>
    <div class="field @(!_editContextValidator.IsFieldValidated(nameof(_skill.Category)) ? "error" : null)">
      <label data-tooltip="How the Skill should be grouped by" data-position="top left">
        Category
      </label>
      <InputText class="ui input" type="text" placeholder="Category" maxlength="50" @bind-Value="_skill.Category" />
      @if (!_editContextValidator.IsFieldValidated(nameof(_skill.Category)))
      {
        <div class="ui pointing red basic label">
          <ValidationMessage For="@(() => _skill.Category)"></ValidationMessage>
        </div>
      }
    </div>
  </div>
  <div class="field @(!_editContextValidator.IsFieldValidated(nameof(_skill.Description)) ? "error" : null)">
    <label data-tooltip="A description of the Skill" data-position="top left">
      Description
    </label>
    <InputTextArea class="ui input noresize" rows="2" type="text" placeholder="Describe the Skill" maxlength="1000" @bind-Value="_skill.Description" />
    @if (!_editContextValidator.IsFieldValidated(nameof(_skill.Description)))
    {
      <div class="ui pointing red basic label">
        <ValidationMessage For="@(() => _skill.Description)"></ValidationMessage>
      </div>
    }
  </div>
  <div class="ui divider"></div>
  <div class="field">
    <select class="ui dropdown" @bind="@this.SkillType">
      <option value="@SkillType.Active">Roll</option>
      <option value="@SkillType.Passive">Ability</option>
    </select>
  </div>

  <div class="fields">
    <div class="fifteen wide field">
      @if (_skill.SkillType == SkillType.Active)
      {
        <div class="ui visible message">
          <i class="info icon"></i>
          Add different Rolls to do basic math, interact with Keywords, or roll dice.e.g. 1d20 + HP
        </div>
      }
      else if (_skill.SkillType == SkillType.Passive)
      {
        <div class="ui visible message">
          <i class="cog icon"></i>
          Add passive effects to the Character .e.g. Movement += 1
        </div>
      }
    </div>
    <div class="one wide field">
      <button type="button" class="ui right floated positive basic icon button @(_skill.Expressions.Count >= 5 ? "disabled" : null)" @onclick="@this.AddExpression" data-tooltip="Add Roll" data-position="top left">
        <i class="add icon"></i>
      </button>
    </div>
  </div>
  @foreach (var expression in _skill.Expressions.Select((e, i) => new { Index = i, Skill = e }))
  {
    var expressionIndex = expression.Index;

    @if (_skill.SkillType == SkillType.Passive)
    {
      <div class="fields">
        <div class="six wide field @(_invalidExpressionSelf.Contains(expressionIndex) ? "error" : null)">
          <InputText class="ui input" type="text" placeholder="Character" maxlength="200" @bind-Value="@expression.Skill.SelfExpression"></InputText>
          @if (_invalidExpressionSelf.Contains(expressionIndex))
          {
            <div class="ui pointing red basic label">
              Character Roll must result in a valid number.
            </div>
          }
        </div>
        <div class="three wide field">
          <select class="ui dropdown" @bind="@expression.Skill.OperatorExpression">
            <option value="=">=</option>
            <option value="+=">+</option>
            <option value="-=">-</option>
          </select>
        </div>
        <div class="six wide field @(_invalidExpressionTarget.Contains(expressionIndex) ? "error" : null)">
          <InputText class="ui input" type="text" placeholder="Target" maxlength="200" @bind-Value="@expression.Skill.TargetExpression"></InputText>
          @if (_invalidExpressionTarget.Contains(expressionIndex))
          {
            <div class="ui pointing red basic label">
              Target Roll must result in a valid number.
            </div>
          }
        </div>
      </div>
    }
    else if (_skill.SkillType == SkillType.Active)
    {
      <div class="field @(_invalidExpressionSelf.Contains(expressionIndex) ? "error" : null)">
        <InputText class="ui input" type="text" placeholder="Character" maxlength="200" @bind-Value="@expression.Skill.SelfExpression"></InputText>
        @if (_invalidExpressionSelf.Contains(expressionIndex))
        {
          <div class="ui pointing red basic label">
            Character Roll must result in a valid number.
          </div>
        }
      </div>
    }
  }

  @if (_skill.SkillType == SkillType.Passive)
  {
  <div class="two fields">
    <div class="field @(!_editContextValidator.IsFieldValidated(nameof(_skill.ResistanceTraits)) ? "error" : null)">
      <label data-tooltip="Determines which damage types the Equipment will take half damage from." data-position="top left">
        Resistances
      </label>
      <InputText class="ui input" type="text" placeholder="Resistances" maxlength="200" @bind-Value="@_skill.ResistanceTraits"></InputText>
      @if (!_editContextValidator.IsFieldValidated(nameof(_skill.ResistanceTraits)))
      {
        <div class="ui pointing red basic label">
          <ValidationMessage For="@(() => _skill.ResistanceTraits)"></ValidationMessage>
        </div>
      }
    </div>
    <div class="field @(!_editContextValidator.IsFieldValidated(nameof(_skill.ImmunityTraits)) ? "error" : null)">
      <label data-tooltip="Determines which damage types the Equipment will take no damage from." data-position="top left">
        Immunities
      </label>
      <InputText class="ui input" type="text" placeholder="Immunities" maxlength="200" @bind-Value="@_skill.ImmunityTraits"></InputText>
      @if (!_editContextValidator.IsFieldValidated(nameof(_skill.ImmunityTraits)))
      {
        <div class="ui pointing red basic label">
          <ValidationMessage For="@(() => _skill.ImmunityTraits)"></ValidationMessage>
        </div>
      }
    </div>
  </div>
  }
  <div class="two fields">
    <div class="field">
      <button class="ui fluid large submit primary button @(_isSaving ? "loading disabled" : null)">Save</button>
    </div>
    <div class="field">
      <button type="button" class="ui fluid large button @(_isSaving ? "disabled" : null)" @onclick="() => _isListView = true">Cancel</button>
    </div>
  </div>
</EditForm>
  }
<DeleteConfirmation ItemType="Skill" ConfirmClicked="@this.DeleteAsync"></DeleteConfirmation>
